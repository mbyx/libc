/* This file was autogenerated by ctest; do not modify directly */
{#- â†‘ Doesn't apply here, this is the template! +#}

/// As this file is sometimes built using rustc, crate level attributes
/// are not allowed at the top-level, so we hack around this by keeping it
/// inside of a module.
mod generated_tests {
    #![allow(non_snake_case)]
    #![deny(improper_ctypes_definitions)]
    use std::fmt::{Debug, LowerHex};
    use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};
    use std::{mem, ptr, slice};
    use std::mem::offset_of;

    use super::*;

    pub static FAILED: AtomicBool = AtomicBool::new(false);
    pub static NTESTS: AtomicUsize = AtomicUsize::new(0);

    /// Check that the value returned from the Rust and C side in a certain test is equivalent.
    ///
    /// Internally it will remember which checks failed and how many tests have been run.
    fn check_same<T: PartialEq + Debug>(rust: T, c: T, attr: &str) {
        if rust != c {
            eprintln!("bad {attr}: rust: {rust:?} != c {c:?}");
            FAILED.store(true, Ordering::Relaxed);
        } else {
            NTESTS.fetch_add(1, Ordering::Relaxed);
        }
    }

    /// Check that the value returned from the Rust and C side in a certain test is equivalent.
    ///
    /// Internally it will remember which checks failed and how many tests have been run. This
    /// method is the same as `check_same` but prints errors in bytes in hex.
    fn check_same_hex<T: PartialEq + LowerHex + Debug>(rust: T, c: T, attr: &str) {
        if rust != c {
            eprintln!("bad {attr}: rust: {rust:?} ({rust:#x}) != c {c:?} ({c:#x})");
            FAILED.store(true, Ordering::Relaxed);
        } else {
            NTESTS.fetch_add(1, Ordering::Relaxed);
        }
    }

    {%- for constant in ffi_items.constants() +%}
    {%- let ty = constant.ty.to_token_stream().to_string() +%}
    {%- let ident = constant.ident() +%}

    {%- if ty == "* const c_char" +%}

    // Test that the string constant is the same in both Rust and C.
    // While fat pointers can't be translated, we instead use * const c_char.
    pub fn const_{{ ident }}() {
        use std::ffi::CStr;
        extern "C" {
            fn __test_const_{{ ident }}() -> *const *const u8;
        }
        let val = {{ ident }};
        unsafe {
            let ptr = *__test_const_{{ ident }}();
            // c_char can be i8 or u8, so just cast to i8.
            let val = CStr::from_ptr(val.cast::<i8>());
            let val = val.to_str().expect("const {{ ident }} not utf8");
            let c = ::std::ffi::CStr::from_ptr(ptr as *const _);
            let c = c.to_str().expect("const {{ ident }} not utf8");
            check_same(val, c, "{{ ident }} string");
        }
    }

    {%- else +%}

    // Test that the value of the constant is the same in both Rust and C.
    // This performs a byte by byte comparision of the constant value.
    pub fn const_{{ ident }}() {
        extern "C" {
            fn __test_const_{{ ident }}() -> *const {{ ty }};
        }
        let val = {{ ident }};
        unsafe {
            let ptr1 = ptr::from_ref(&val).cast::<u8>();
            let ptr2 = __test_const_{{ ident }}().cast::<u8>();
            let ptr1_bytes = slice::from_raw_parts(ptr1, mem::size_of::<{{ ty }}>());
            let ptr2_bytes = slice::from_raw_parts(ptr2, mem::size_of::<{{ ty }}>());
            for (i, (&b1, &b2)) in ptr1_bytes.iter().zip(ptr2_bytes.iter()).enumerate() {
                // HACK: This may read uninitialized data! We do this because
                // there isn't a good way to recursively iterate all fields.
                check_same_hex(b1, b2, &format!("{{ ident }} value at byte {}", i));
            }
        }
    }
    {%- endif +%}
    {%- endfor +%}

    {%- for alias in ffi_items.aliases() +%}
    {%- let ident = alias.ident() +%}

    /// Test that the size and alignment of the aliased type is the same in both Rust and C.
    /// 
    /// This can fail if a different type is used on one side, and uses the built in size and
    /// alignment functions to check.
    pub fn size_align_{{ ident }}() {
        extern "C" {
            #[allow(non_snake_case)]
            fn __test_size_{{ ident }}() -> u64;
            #[allow(non_snake_case)]
            fn __test_align_{{ ident }}() -> u64;
        }
        unsafe {
            check_same(mem::size_of::<{{ ident }}>() as u64,
                __test_size_{{ ident }}(), "{{ ident }} size");
            check_same(mem::align_of::<{{ ident }}>() as u64,
                __test_align_{{ ident }}(), "{{ ident }} align");
        }
    }

    {%- if self::has_sign(ffi_items, alias.ty) +%}
    /// Test that the aliased type has the same sign (signed or unsigned) in both Rust and C.
    ///
    /// This check can be performed because `!(0 as _)` yields either -1 or the maximum value
    /// depending on whether a signed or unsigned type is used. This is simply checked on both
    /// Rust and C sides to see if they are equal.
    pub fn sign_{{ ident }}() {
        extern "C" {
            #[allow(non_snake_case)]
            fn __test_signed_{{ ident }}() -> u32;
        }
        unsafe {
            check_same(((!(0 as {{ ident }})) < (0 as {{ ident }})) as u32,
                    __test_signed_{{ ident }}(), "{{ ident }} signed");
        }
    }
    {%- endif +%}

    {%- if self::should_roundtrip(generator, ident) +%}

    /// Generates a padding map for a specific type.
    ///
    /// Essentially, it returns a list of bytes, whose length is equal to the size of the type in
    /// bytes. Each element corresponds to a byte and has two values. `1` if the byte is padding,
    /// and `0` if the byte is not padding.
    ///
    /// For type aliases, the padding map is all zeroes.
    fn roundtrip_padding_{{ ident }}() -> Vec<u8> {
        let mut pad = Vec::new();
        pad.resize(mem::size_of::<{{ ident }}>(), 0);
        pad
    }

    /// Tests whether the type alias `x` when passed to C and back to Rust remains unchanged.
    ///
    /// It checks if the size is the same as well as if the padding bytes are all in the
    /// correct place.
    pub fn roundtrip_{{ ident }}() {
        use std::ffi::c_int;

        type U = {{ ident }};
        extern "C" {
            fn __test_roundtrip_{{ ident }}(
                size: i32, x: U, e: *mut c_int, pad: *const u8
            ) -> U;
        }
        let pad = roundtrip_padding_{{ ident }}();
        unsafe {
            use std::mem::{MaybeUninit, size_of};
            let mut error: c_int = 0;
            let mut y = MaybeUninit::<U>::uninit();
            let mut x = MaybeUninit::<U>::uninit();
            let x_ptr = x.as_mut_ptr().cast::<u8>();
            let y_ptr = y.as_mut_ptr().cast::<u8>();
            let sz = size_of::<U>();
            for i in 0..sz {
                let c: u8 = (i % 256) as u8;
                let c = if c == 0 { 42 } else { c };
                let d: u8 = 255_u8 - (i % 256) as u8;
                let d = if d == 0 { 42 } else { d };
                x_ptr.add(i).write_volatile(c);
                y_ptr.add(i).write_volatile(d);
            }
            let r: U = __test_roundtrip_{{ ident }}(sz as i32, x.assume_init(), &mut error, pad.as_ptr());
            if error == 1 {
                FAILED.store(true, Ordering::Relaxed);
                return;
            }
            for i in 0..size_of::<U>() {
                if pad[i] == 1 { continue; }
                let rust = (*y_ptr.add(i)) as usize;
                let c = (&r as *const _ as *const u8)
                            .add(i).read_volatile() as usize;
                if rust != c {
                    eprintln!(
                        "rust [{i}] = {rust} != {c} (C): C \"{{ ident }}\" -> Rust",
                    );
                    FAILED.store(true, Ordering::Relaxed);
                }
            }
        }
    }
    {%- endif +%}
    {%- endfor +%}

    {%- for structure in ffi_items.structs() +%}
    {%- let ident = structure.ident() +%}

    /// Test that the size and alignment of the aliased type is the same in both Rust and C.
    /// 
    /// This can fail if a different type is used on one side, and uses the built in size and
    /// alignment functions to check.
    pub fn size_align_{{ ident }}() {
        extern "C" {
            #[allow(non_snake_case)]
            fn __test_size_{{ ident }}() -> u64;
            #[allow(non_snake_case)]
            fn __test_align_{{ ident }}() -> u64;
        }
        unsafe {
            check_same(mem::size_of::<{{ ident }}>() as u64,
                __test_size_{{ ident }}(), "{{ ident }} size");
            check_same(mem::align_of::<{{ ident }}>() as u64,
                __test_align_{{ ident }}(), "{{ ident }} align");
        }
    }

    pub fn field_offset_size_{{ ident }}() {
        {%- for field in structure.fields +%}
        {%- if !self::skip_field(generator, structure, field) +%}
        {%- if field.public +%}
        extern "C" {
            fn __test_offset_{{ ident }}_{{ field.ident() }}() -> u64;
            fn __test_fsize_{{ ident }}_{{ field.ident() }}() -> u64;
        }
        unsafe {
            let uninit_ty = std::mem::MaybeUninit::<{{ ident }}>::uninit();
            let uninit_ty = uninit_ty.as_ptr();
            let ty_ptr = std::ptr::addr_of!((*uninit_ty).{{ field.ident() }});
            let val = ty_ptr.read_unaligned();
            check_same(offset_of!({{ ident }}, {{ field.ident() }}),
                    __test_offset_{{ ident }}_{{ field.ident() }}() as usize,
                    "field offset {{ field.ident() }} of {{ ident }}");
            check_same(mem::size_of_val(&val) as u64,
                    __test_fsize_{{ ident }}_{{ field.ident() }}(),
                    "field size {{ field.ident() }} of {{ ident }}");
        }
        {%- if !self::skip_field_type(generator, structure, field) +%}
        extern "C" {
            fn __test_field_type_{{ ident }}_{{ field.ident() }}(a: *mut {{ ident }}) -> *mut u8;
        }
        unsafe {
            let mut uninit_ty = std::mem::MaybeUninit::<{{ ident }}>::uninit();
            let uninit_ty = uninit_ty.as_mut_ptr();
            let ty_ptr_mut = std::ptr::addr_of_mut!(*uninit_ty);
            let field_ptr = std::ptr::addr_of!((*uninit_ty).{{ field.ident() }});
            check_same(field_ptr as *mut _,
                    __test_field_type_{{ ident }}_{{ field.ident() }}(ty_ptr_mut),
                    "field type {{ field.ident() }} of {{ ident }}");
            #[allow(unknown_lints, forgetting_copy_types)]
            mem::forget(uninit_ty);
        }
        {%- endif +%}
        {%- endif +%}
        {%- endif +%}
        {%- endfor +%}
    }

    {%- if self::should_roundtrip(generator, ident) +%}

    /// Generates a padding map for a specific type.
    ///
    /// Essentially, it returns a list of bytes, whose length is equal to the size of the type in
    /// bytes. Each element corresponds to a byte and has two values. `1` if the byte is padding,
    /// and `0` if the byte is not padding.
    ///
    /// For type aliases, the padding map is all zeroes.
    fn roundtrip_padding_{{ ident }}() -> Vec<u8> {
        // stores (offset, size) for each field
        let mut v = Vec::<(usize, usize)>::new();
        let foo = std::mem::MaybeUninit::<{{ ident }}>::uninit();
        let foo = foo.as_ptr();
        {%- for field in structure.fields +%}
        {%- if field.public +%}
        unsafe {
            let ty_ptr = std::ptr::addr_of!((*foo).{{ field.ident() }});
            let val = ty_ptr.read_unaligned();
            let size = mem::size_of_val(&val);
            let off = offset_of!({{ ident }}, {{ field.ident() }}) as usize;
            v.push((off, size));
        }
        {%- endif +%}
        {%- endfor +%}
        // This vector contains `1` if the byte is padding
        // and `0` if the byte is not padding.
        let mut pad = Vec::<u8>::new();
        // Initialize all bytes as:
        //  - padding if we have fields, this means that only
        //  the fields will be checked
        //  - no-padding if we have a type alias: if this
        //  causes problems the type alias should be skipped
        pad.resize(mem::size_of::<{{ ident }}>(), 1);
        for (off, size) in &v {
            for i in 0..*size {
                pad[off + i] = 0;
            }
        }
        pad
    }

    /// Tests whether the type alias `x` when passed to C and back to Rust remains unchanged.
    ///
    /// It checks if the size is the same as well as if the padding bytes are all in the
    /// correct place.
    pub fn roundtrip_{{ ident }}() {
        use std::ffi::c_int;

        type U = {{ ident }};
        extern "C" {
            fn __test_roundtrip_{{ ident }}(
                size: i32, x: U, e: *mut c_int, pad: *const u8
            ) -> U;
        }
        let pad = roundtrip_padding_{{ ident }}();
        unsafe {
            use std::mem::{MaybeUninit, size_of};
            let mut error: c_int = 0;
            let mut y = MaybeUninit::<U>::uninit();
            let mut x = MaybeUninit::<U>::uninit();
            let x_ptr = x.as_mut_ptr().cast::<u8>();
            let y_ptr = y.as_mut_ptr().cast::<u8>();
            let sz = size_of::<U>();
            for i in 0..sz {
                let c: u8 = (i % 256) as u8;
                let c = if c == 0 { 42 } else { c };
                let d: u8 = 255_u8 - (i % 256) as u8;
                let d = if d == 0 { 42 } else { d };
                x_ptr.add(i).write_volatile(c);
                y_ptr.add(i).write_volatile(d);
            }
            let r: U = __test_roundtrip_{{ ident }}(sz as i32, x.assume_init(), &mut error, pad.as_ptr());
            if error == 1 {
                FAILED.store(true, Ordering::Relaxed);
                return;
            }
            for i in 0..size_of::<U>() {
                if pad[i] == 1 { continue; }
                let rust = (*y_ptr.add(i)) as usize;
                let c = (&r as *const _ as *const u8)
                            .add(i).read_volatile() as usize;
                if rust != c {
                    eprintln!(
                        "rust [{i}] = {rust} != {c} (C): C \"{{ ident }}\" -> Rust",
                    );
                    FAILED.store(true, Ordering::Relaxed);
                }
            }
        }
    }
    {%- endif +%}
    {%- endfor +%}

    {%- for union_ in ffi_items.unions() +%}

    {%- endfor +%}
}

use generated_tests::*;

fn main() {
    println!("RUNNING ALL TESTS");
    run_all();
    if FAILED.load(std::sync::atomic::Ordering::Relaxed) {
        panic!("some tests failed");
    } else {
        println!(
            "PASSED {} tests",
            NTESTS.load(std::sync::atomic::Ordering::Relaxed)
        );
    }
}

// Run all tests by calling the functions that define them.
fn run_all() {
    {%- for constant in ffi_items.constants() +%}
    const_{{ constant.ident() }}();
    {%- endfor +%}

    {%- for alias in ffi_items.aliases() +%}
    {%- let ident = alias.ident() +%}

    size_align_{{ ident }}();

    {%- if self::has_sign(ffi_items, alias.ty) +%}
    sign_{{ ident }}();
    {%- endif +%}

    {%- if self::should_roundtrip(generator, ident) +%}
    roundtrip_{{ ident }}();
    {%- endif +%}

    {%- endfor +%}

    {%- for structure in ffi_items.structs() +%}
    {%- let ident = structure.ident() +%}

    size_align_{{ ident }}();
    field_offset_size_{{ ident }}();
    {%- if self::should_roundtrip(generator, structure.ident()) +%}
    roundtrip_{{ ident }}();
    {%- endif +%}
    {%- endfor +%}
}

